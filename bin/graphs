#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift File.expand_path '../lib', File.dirname(__FILE__)

require 'scrapod/monit/status/system'

require 'etc'

DURATION = 2 * 24 * 60 * 60 # 2 days

USER  = 'ubuntu'
GROUP = 'ubuntu'

UID = Etc.getpwnam(USER).uid
GID = Etc.getgrnam(GROUP).gid

SHARED_DIR = '/srv/scrapod/shared'

RRDS_DIR   = File.join SHARED_DIR, 'tmp/graphs'
IMAGES_DIR = File.join SHARED_DIR, 'public/graphs'

def chown(path)
  f = File.new path
  f.chown UID, GID
  f.chmod 0o644 # -rw-r--r--
rescue Errno::ENOENT => e # rubocop:disable Lint/HandleExceptions
  p e
end

raise 'Must run as root' unless Process.uid.zero?
raise "Directory #{IMAGES_DIR} does not exist" unless File.directory? IMAGES_DIR

cpu_rrd_file = File.join RRDS_DIR, 'cpu.rrd'

unless File.exist? cpu_rrd_file
  `rrdtool create #{cpu_rrd_file} --start N --step 300 DS:us:GAUGE:600:0:100 DS:sy:GAUGE:600:0:100 DS:wa:GAUGE:600:0:100 RRA:AVERAGE:0.5:1:576`
  chown cpu_rrd_file
end

ram_rrd_file = File.join RRDS_DIR, 'ram.rrd'

unless File.exist? ram_rrd_file
  `rrdtool create #{ram_rrd_file} --start N --step 300 DS:ram:GAUGE:600:0:100 RRA:AVERAGE:0.5:1:576`
  chown ram_rrd_file
end

system = Scrapod::Monit::Status::System.new 'scrapod'

cpu_usage    = system.metric 'cpu'
memory_usage = system.metric 'memory usage'

us = /(?<percent>\d+)(\.\d+)?%us/.match cpu_usage
sy = /(?<percent>\d+)(\.\d+)?%sy/.match cpu_usage
wa = /(?<percent>\d+)(\.\d+)?%wa/.match cpu_usage
m = /\[(?<percent>\d+)(\.\d+)?%\]/.match memory_usage

`rrdtool update #{cpu_rrd_file} N:#{us&.[](:percent) || 'U'}:#{sy&.[](:percent) || 'U'}:#{wa&.[](:percent) || 'U'}` if us || sy || wa

`rrdtool update #{ram_rrd_file} N:#{m[:percent]}` if m

`rrdtool graph #{IMAGES_DIR}/cpu.png -a PNG --start #{Time.now.to_i - DURATION} --end N --lower-limit 0 --upper-limit 100 DEF:us=#{cpu_rrd_file}:us:AVERAGE DEF:sy=#{cpu_rrd_file}:sy:AVERAGE DEF:wa=#{cpu_rrd_file}:wa:AVERAGE LINE1:us#ff0000:User LINE1:sy#00ff00:System LINE1:wa#0000ff:Wait`

`rrdtool graph #{IMAGES_DIR}/ram.png -a PNG --start #{Time.now.to_i - DURATION} --end N --lower-limit 0 --upper-limit 100 DEF:ram=#{ram_rrd_file}:ram:AVERAGE LINE1:ram#ff0000:RAM`

chown "#{IMAGES_DIR}/cpu.png"
chown "#{IMAGES_DIR}/ram.png"
